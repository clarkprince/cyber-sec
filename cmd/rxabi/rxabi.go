// Based on stringer implementation
// https://cs.opensource.google/go/x/tools/+/refs/tags/v0.5.0:cmd/stringer/

// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// rxabi (ABI for Application Binary Interface, rx for our frontend package)
// generates a TypeScript interface to communicate with the WASM Go rx engine
// Given the name of a (signed or unsigned) integer type T that has constants
// defined, rxabi will create a new self-contained TS source file exposing a list of events
//
// The file is created in the same package and directory as the package that defines T.
// It has helpful defaults designed for use with go generate.
//
// rxabi works best with constants that are consecutive values such as created using iota,
// but creates good code regardless. In the future it might also provide custom support for
// constant sets that are bit patterns.
//
// For example, given this snippet,
//
//	package painkiller
//
//	type Pill int
//
//	const (
//		Placebo Pill = iota
//		Aspirin
//		Ibuprofen
//		Paracetamol
//		Acetaminophen = Paracetamol
//	)
//
// running this command
//
//	rxabi -type=Pill
//
// in the same directory will create the file pill-abi.ts, in package painkiller,
// containing a definition of
//
//	export const PillEventsCode = { Placebo: 1, /*..*/.}
//
// That method will translate the value of a Pill constant to the string representation
// of the respective constant name, so that the call fmt.Print(painkiller.Aspirin) will
// print the string "Aspirin".
//
// Typically this process would be run using go generate, like this:
//
//	//go:generate rxabi -type=Pill
//
// If multiple constants have the same value, the lexically first matching name will
// be used (in the example, Acetaminophen will print as "Paracetamol").
//
// With no arguments, it processes the package in the current directory.
// Otherwise, the arguments must name a single directory holding a Go package
// or a set of Go source files that represent a single Go package.
//
// The -type flag accepts a comma-separated list of types so a single run can
// generate methods for multiple types. The default output file is t_abi.ts,
// where t is the lower-cased name of the first type listed. It can be overridden
// with the -output flag.
//
// The -linecomment flag tells rxabi to generate the text of any line comment, trimmed
// of leading spaces, instead of the constant name. For instance, if the constants above had a
// Pill prefix, one could write
//
//	PillAspirin // Aspirin
//
// to suppress it in the output.
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/constant"
	"go/token"
	"go/types"
	"log"
	"os"
	"path/filepath"
	"strings"

	"golang.org/x/tools/go/packages"
)

var (
	typeNames   = flag.String("type", "", "comma-separated list of type names; must be set")
	output      = flag.String("output", "", "output file name; default srcdir/<type>_abi.go")
	trimprefix  = flag.String("trimprefix", "", "trim the `prefix` from the generated constant names")
	linecomment = flag.Bool("linecomment", false, "use line comment text as printed text when present")
	buildTags   = flag.String("tags", "", "comma-separated list of build tags to apply")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of rxabi:\n")
	fmt.Fprintf(os.Stderr, "\trxabi [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\trxabi [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	// boilerplate code identitcal to stringer logic
	log.SetFlags(0)
	log.SetPrefix("rxabi: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")
	var tags []string
	if len(*buildTags) > 0 {
		tags = strings.Split(*buildTags, ",")
	}

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var dir string
	g := Generator{
		trimPrefix:  *trimprefix,
		lineComment: *linecomment,
	}
	// TODO(suzmue): accept other patterns for packages (directories, list of files, import paths, etc).
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
	} else {
		if len(tags) != 0 {
			log.Fatal("-tags option applies only to directories, not when files are specified")
		}
		dir = filepath.Dir(args[0])
	}

	g.parsePackage(args, tags)

	// Print the header and package clause.
	// NOTE: this clause has to respect a standard regex
	g.Printf("// Code generated by \"rxabi %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("// This file should be tracked by the version manager\n")
	g.Printf("\n")

	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_abi.ts", types[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := os.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.

	trimPrefix  string
	lineComment bool
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName string  // Name of the constant type.
	values   []Value // Accumulator for constant values of that type.

	trimPrefix  string
	lineComment bool
}

type Package struct {
	name  string
	defs  map[*ast.Ident]types.Object
	files []*File
}

// parsePackage analyzes the single package constructed from the patterns and tags.
// parsePackage exits if there is an error.
func (g *Generator) parsePackage(patterns []string, tags []string) {
	cfg := &packages.Config{
		Mode: packages.NeedName | packages.NeedTypes | packages.NeedTypesInfo | packages.NeedSyntax,
		// TODO: Need to think about constants in test files. Maybe write type_string_test.go
		// in a separate pass? For later.
		Tests:      false,
		BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(tags, " "))},
	}
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("error: %d packages found", len(pkgs))
	}
	g.addPackage(pkgs[0])
}

// addPackage adds a type checked Package and its syntax files to the generator.
func (g *Generator) addPackage(pkg *packages.Package) {
	g.pkg = &Package{
		name:  pkg.Name,
		defs:  pkg.TypesInfo.Defs,
		files: make([]*File, len(pkg.Syntax)),
	}

	for i, file := range pkg.Syntax {
		g.pkg.files[i] = &File{
			file:        file,
			pkg:         g.pkg,
			trimPrefix:  g.trimPrefix,
			lineComment: g.lineComment,
		}
	}
}

// generate produces the String method for the named type.
func (g *Generator) generate(typeName string) {
	values := make([]Value, 0, 100)
	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.typeName = typeName
		file.values = nil
		if file.file != nil {
			ast.Inspect(file.file, file.genDecl)
			values = append(values, file.values...)
		}
	}

	if len(values) == 0 {
		log.Fatalf("no values defined for type %s", typeName)
	}
	g.build(values, typeName)
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.CONST {
		// We only care about const declarations.
		return true
	}
	// The name of the type of the constants we are declaring.
	// Can change if this is a multi-element declaration.
	typ := ""
	// Loop over the elements of the declaration. Each element is a ValueSpec:
	// a list of names possibly followed by a type, possibly followed by values.
	// If the type and value are both missing, we carry down the type (and value,
	// but the "go/types" package takes care of that).
	for _, spec := range decl.Specs {
		vspec := spec.(*ast.ValueSpec) // Guaranteed to succeed as this is CONST.
		if vspec.Type == nil && len(vspec.Values) > 0 {
			// "X = 1". With no type but a value. If the constant is untyped,
			// skip this vspec and reset the remembered type.
			typ = ""

			// If this is a simple type conversion, remember the type.
			// We don't mind if this is actually a call; a qualified call won't
			// be matched (that will be SelectorExpr, not Ident), and only unusual
			// situations will result in a function call that appears to be
			// a type conversion.
			ce, ok := vspec.Values[0].(*ast.CallExpr)
			if !ok {
				continue
			}
			id, ok := ce.Fun.(*ast.Ident)
			if !ok {
				continue
			}
			typ = id.Name
		}
		if vspec.Type != nil {
			// "X T". We have a type. Remember it.
			ident, ok := vspec.Type.(*ast.Ident)
			if !ok {
				continue
			}
			typ = ident.Name
		}
		if typ != f.typeName {
			// This is not the type we're looking for.
			continue
		}
		// We now have a list of names (from one line of source code) all being
		// declared with the desired type.
		// Grab their names and actual values and store them in f.values.
		for _, name := range vspec.Names {
			if name.Name == "_" {
				continue
			}
			// This dance lets the type checker find the values for us. It's a
			// bit tricky: look up the object declared by the name, find its
			// types.Const, and extract its value.
			obj, ok := f.pkg.defs[name]
			if !ok {
				log.Fatalf("no value for constant %s", name)
			}
			info := obj.Type().Underlying().(*types.Basic).Info()
			if info&types.IsInteger == 0 && info&types.IsString == 0 {
				log.Fatalf("can only handle integer and string constant types, but got %s", typ)
			}
			value := obj.(*types.Const).Val() // Guaranteed to succeed as this is CONST.
			if value.Kind() != constant.Int && value.Kind() != constant.String {
				log.Fatalf("can't happen: constant is not an integer or string %s", name)
			}
			var v Value
			switch value.Kind() {
			case constant.Int:
				i64, isInt := constant.Int64Val(value)
				u64, isUint := constant.Uint64Val(value)
				if !isInt && !isUint {
					log.Fatalf("internal error: value of %s is not an integer: %s", name, value.String())
				}
				if !isInt {
					u64 = uint64(i64)
				}
				// generate an enum of ints
				v = Value{
					originalName: name.Name,
					value:        u64,
					valueType:    IntValue,
					signed:       info&types.IsUnsigned == 0,
					str:          value.String(),
				}
			case constant.String:
				// generate an union of strings
				v = Value{
					originalName: name.Name,
					strValue:     constant.StringVal(value),
					valueType:    StringValue,
					signed:       info&types.IsUnsigned == 0,
					str:          value.String(),
				}
			default:
				log.Fatal("unsupported constant type ", value.Kind())
			}
			if c := vspec.Comment; f.lineComment && c != nil && len(c.List) == 1 {
				v.name = strings.TrimSpace(c.Text())
			} else {
				v.name = strings.TrimPrefix(v.originalName, f.trimPrefix)
			}
			f.values = append(f.values, v)
		}
	}
	return false
}

// format returns the ts formatted contents of the Generator's buffer.
func (g *Generator) format() []byte {
	// NOTE: stringer generates go files and thus will use gofmt
	// but here, we generate TS files, no formatting is actually needed
	src := g.buf.Bytes()
	return src
}

type ValueType string

const (
	StringValue ValueType = "string"
	IntValue    ValueType = "int"
)

// Value represents a declared constant.
type Value struct {
	originalName string // The name of the constant.
	name         string // The name with trimmed prefix.
	// The value is stored as a bit pattern alone. The boolean tells us
	// whether to interpret it as an int64 or a uint64; the only place
	// this matters is when sorting.
	// Much of the time the str field is all we need; it is printed
	// by Value.String.
	value     uint64 // Will be converted to int64 when needed.
	strValue  string // If value is a string union instead of an integer enum
	valueType ValueType
	signed    bool   // Whether the constant is a signed type.
	str       string // The string representation given by the "go/constant" package.
}

func (v *Value) String() string {
	return v.str
}

func (g *Generator) build(values []Value, tsTypeName string) {
	if len(values) == 0 {
		g.Printf("// Warning: type %[1]s has no value", tsTypeName)
		return
		// TODO(eb): we should assess the types before the build, not for each value
		// TODO(eb): we should allow to output strings as an enum or a map using an option,
		// because unions lose the initial Go variable name, they keep only the value
	} else if values[0].valueType == StringValue {
		// if values are strings, we output a TS union
		g.buildUnion(values, tsTypeName)
	} else {
		// if values are indexes, we output a const map
		// enums are interesting because "Foobar.SomeValue" can be used both as a runtime value or a type
		g.buildEnum(values, tsTypeName)
		// NOTE: JS maps are optionaly possible
		// and even recommended in official doc
		// @see https://www.typescriptlang.org/docs/handbook/enums.html#objects-vs-enums
		// g.buildMap(values, tsTypeName)
	}
}

// generates the event map
func (g *Generator) buildEnum(values []Value, tsTypeName string) {
	g.Printf("export enum %[1]s {\n", tsTypeName)
	for i, v := range values {
		g.Printf("\t%[1]s= %[2]d,\n", v.name, i)
	}
	g.Printf("}")
}

// Object equivalent to an enum
// This is recommended over TS enum, as this code also works in pure JavaScript
func (g *Generator) buildMap(values []Value, tsTypeName string) {
	g.Printf("export const %[1]s = {\n", tsTypeName)
	for i, v := range values {
		g.Printf("\t%[1]s: %[2]d,\n", v.name, i)
	}
	g.Printf("} as const\n")
	// compagnon type (contrary to enum, we need to have both a runtime value and a type)
	g.Printf("export type %[1]sValue = typeof %[1]s[keyof typeof %[1]s]\n", tsTypeName)
}

func (g *Generator) buildUnion(values []Value, tsTypeName string) {
	g.Printf("export type %[1]s =", tsTypeName)
	for i, v := range values {
		// NOTE: v.name is the Go variable name,
		// it's useful only when constructing an enum
		// v.strValue is the actual value
		g.Printf(" | \"%[1]s\"", v.strValue, i)
	}
	g.Printf(";\n")
}
