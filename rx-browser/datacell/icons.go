package main

import (
	"encoding/base64"

	. "trout.software/kraken/webapp/rx-browser/rx"
)

// TODO(rdo) generate those from HTML definitions

func searchicon() *Node {
	return GetNode("svg").
		AddAttr("width", "16").AddAttr("height", "16").
		AddAttr("viewBox", "0 0 24 24").
		AddAttr("fill", "none").
		AddAttr("xmlns", "http://www.w3.org/2000/svg").
		AddChildren(GetNode("path").
			AddAttr("stroke", "#8E8E93").
			AddAttr("stroke-width", "2").
			AddAttr("stroke-linecap", "round").
			AddAttr("stroke-linejoin", "round").
			AddAttr("d", "M8 16L10.879 13.121M10.879 13.121C11.1567 13.4033 11.4876 13.6279 11.8525 13.7817C12.2174 13.355 12.6092 14.0156 13.0052 14.0172C13.4012 14.0189 13.7936 13.9421 14.1599 13.7914C14.5261 13.6406 14.8588 13.4188 15.1388 13.1388C15.4189 12.8588 15.6408 12.5262 15.7916 12.16C15.9425 11.7938 16.0193 11.4014 16.0177 11.0054C16.0162 10.6094 15.9362 10.2176 15.7825 9.85265C15.6287 9.48768 15.4043 9.15677 15.122 8.879C14.5579 8.32389 13.7973 8.01417 13.0059 8.0173C12.2145 8.02043 11.4564 8.33615 10.8967 8.89571C10.337 9.45526 10.0211 10.2133 10.0178 11.0047C10.0145 11.7961 10.324 12.5568 10.879 13.121ZM21 12C21 13.1819 20.7672 14.3522 20.3149 15.4442C19.8626 16.5361 19.1997 17.5282 18.364 18.364C17.5282 19.1997 16.5361 19.8626 15.4442 20.3149C14.3522 20.7672 13.1819 21 12 21C10.8181 21 9.64778 20.7672 8.55585 20.3149C7.46392 19.8626 6.47177 19.1997 5.63604 18.364C4.80031 17.5282 4.13738 16.5361 3.68508 15.4442C3.23279 14.3522 3 13.1819 3 12C3 9.61305 3.94821 7.32387 5.63604 5.63604C7.32387 3.94821 9.61305 3 12 3C14.3869 3 16.6761 3.94821 18.364 5.63604C20.0518 7.32387 21 9.61305 21 12Z"))
}

func sortedAscIndicator(fill string) *Node {
	return GetNode("svg").
		AddAttr("width", "12").AddAttr("height", "12").AddAttr("viewBox", "0 0 24 24").
		AddChildren(
			GetNode("path").AddAttr("d", "M10.2199 15.97L8.99994 17.19V5C8.99994 4.59 8.65994 4.25 8.24994 4.25C7.83994 4.25 7.49994 4.59 7.49994 5V17.19L6.27994 15.97C5.98994 15.68 5.50994 15.68 5.21994 15.97C4.92994 16.26 4.92994 16.74 5.21994 17.03L7.71994 19.53C7.78994 19.6 7.86994 19.65 7.95994 19.69C8.04994 19.73 8.14994 19.75 8.24994 19.75C8.34994 19.75 8.44994 19.73 8.53994 19.69C8.62994 19.65 8.70994 19.6 8.77994 19.53L11.2799 17.03C11.5699 16.74 11.5699 16.26 11.2799 15.97C10.9899 15.68 10.5099 15.68 10.2199 15.97Z").AddAttr("fill", fill),
			GetNode("path").AddAttr("d", "M14 11.21C14.39 11.35 14.82 11.15 14.96 10.76L15.24 9.98001H17.27L17.55 10.76C17.66 11.07 17.95 11.26 18.26 11.26C18.34 11.26 18.43 11.25 18.51 11.22C18.9 11.08 19.1 10.65 18.96 10.26L17.25 5.47001C17.08 5.04001 16.69 4.76001 16.25 4.76001C15.81 4.76001 15.42 5.04001 15.25 5.49001L13.55 10.26C13.41 10.65 13.61 11.08 14 11.22V11.21ZM16.73 8.48001H15.77L16.25 7.14001L16.73 8.48001Z").AddAttr("fill", fill),
			GetNode("path").AddAttr("d", "M18.67 13.46C18.48 13.02 18.08 12.75 17.62 12.75H14.51C14.1 12.75 13.76 13.09 13.76 13.5C13.76 13.91 14.1 14.25 14.51 14.25H16.9L14.07 17.2C13.73 17.56 13.64 18.08 13.83 18.54C14.02 18.98 14.42 19.25 14.88 19.25H18.01C18.42 19.25 18.76 18.91 18.76 18.5C18.76 18.09 18.42 17.75 18.01 17.75H15.62L18.44 14.82C18.78 14.46 18.88 13.93 18.68 13.47L18.67 13.46Z").AddAttr("fill", fill),
		)
}

func sortedDescIndicator(fill string) *Node {
	return GetNode("svg").
		AddAttr("width", "12").AddAttr("height", "12").AddAttr("viewBox", "0 0 24 24").
		AddChildren(
			GetNode("path").AddAttr("d", "M8.77995 4.47C8.70995 4.4 8.62995 4.35 8.53995 4.31C8.35995 4.23 8.14995 4.23 7.96995 4.31C7.87995 4.35 7.79995 4.4 7.72995 4.47L5.22995 6.97C4.93995 7.26 4.93995 7.74 5.22995 8.03C5.51995 8.32 5.99995 8.32 6.28995 8.03L7.50995 6.81V19C7.50995 19.41 7.84995 19.75 8.25995 19.75C8.66995 19.75 9.00995 19.41 9.00995 19V6.81L10.23 8.03C10.38 8.18 10.57 8.25 10.76 8.25C10.95 8.25 11.14 8.18 11.29 8.03C11.58 7.74 11.58 7.26 11.29 6.97L8.78995 4.47H8.77995Z").AddAttr("fill", fill),
			GetNode("path").AddAttr("d", "M14 11.21C14.39 11.35 14.82 11.15 14.96 10.76L15.24 9.98001H17.27L17.55 10.76C17.66 11.07 17.95 11.26 18.26 11.26C18.34 11.26 18.43 11.25 18.51 11.22C18.9 11.08 19.1 10.65 18.96 10.26L17.25 5.47001C17.08 5.04001 16.69 4.76001 16.25 4.76001C15.81 4.76001 15.42 5.04001 15.25 5.49001L13.55 10.26C13.41 10.65 13.61 11.08 14 11.22V11.21ZM16.73 8.48001H15.77L16.25 7.14001L16.73 8.48001Z").AddAttr("fill", fill),
			GetNode("path").AddAttr("d", "M18.67 13.46C18.48 13.02 18.08 12.75 17.62 12.75H14.51C14.1 12.75 13.76 13.09 13.76 13.5C13.76 13.91 14.1 14.25 14.51 14.25H16.9L14.07 17.2C13.73 17.56 13.64 18.08 13.83 18.54C14.02 18.98 14.42 19.25 14.88 19.25H18.01C18.42 19.25 18.76 18.91 18.76 18.5C18.76 18.09 18.42 17.75 18.01 17.75H15.62L18.44 14.82C18.78 14.46 18.88 13.93 18.68 13.47L18.67 13.46Z").AddAttr("fill", fill),
		)
}

func elllipsisV(fill string) *Node {
	return GetNode("svg").
		AddAttr("width", "12").AddAttr("height", "12").AddAttr("viewBox", "0 0 24 24").
		AddChildren(
			GetNode("path").AddAttr("d", "M12 13.75C12.9665 13.75 13.75 12.9665 13.75 12C13.75 11.0335 12.9665 10.25 12 10.25C11.0335 10.25 10.25 11.0335 10.25 12C10.25 12.9665 11.0335 13.75 12 13.75Z").AddAttr("fill", fill),
			GetNode("path").AddAttr("d", "M12 6.75C12.9665 6.75 13.75 5.9665 13.75 5C13.75 4.0335 12.9665 3.25 12 3.25C11.0335 3.25 10.25 4.0335 10.25 5C10.25 5.9665 11.0335 6.75 12 6.75Z").AddAttr("fill", fill),
			GetNode("path").AddAttr("d", "M12 20.75C12.9665 20.75 13.75 19.9665 13.75 19C13.75 18.0335 12.9665 17.25 12 17.25C11.0335 17.25 10.25 18.0335 10.25 19C10.25 19.9665 11.0335 20.75 12 20.75Z").AddAttr("fill", fill),
		)
}

func exporticon(fill string) *Node {
	return GetNode("svg").
		AddAttr("width", "12").AddAttr("height", "12").AddAttr("viewBox", "0 0 24 24").
		AddChildren(
			GetNode("path").AddAttr("d", "M15.25 15.75C14.84 15.75 14.5 16.09 14.5 16.5V18C14.5 18.69 13.94 19.25 13.25 19.25H5.75C5.06 19.25 4.5 18.69 4.5 18V6C4.5 5.31 5.06 4.75 5.75 4.75H9V9.5C9 9.91 9.34 10.25 9.75 10.25H14.5V11.5C14.5 11.91 14.84 12.25 15.25 12.25C15.66 12.25 16 11.91 16 11.5V9.5C16 9.3 15.92 9.11 15.78 8.97L10.28 3.47C10.14 3.33 9.95 3.25 9.75 3.25H5.75C4.23 3.25 3 4.48 3 6V18C3 19.52 4.23 20.75 5.75 20.75H13.25C14.77 20.75 16 19.52 16 18V16.5C16 16.09 15.66 15.75 15.25 15.75ZM10.5 5.81L13.44 8.75H10.5V5.81ZM20.94 14.29C20.9 14.38 20.85 14.46 20.78 14.53L17.78 17.53C17.63 17.68 17.44 17.75 17.25 17.75C17.06 17.75 16.87 17.68 16.72 17.53C16.43 17.24 16.43 16.76 16.72 16.47L18.44 14.75H9.75C9.34 14.75 9 14.41 9 14C9 13.59 9.34 13.25 9.75 13.25H18.44L16.72 11.53C16.43 11.24 16.43 10.76 16.72 10.47C17.01 10.18 17.49 10.18 17.78 10.47L20.78 13.47C20.85 13.54 20.9 13.62 20.94 13.71C21.02 13.89 21.02 14.1 20.94 14.28V14.29Z").AddAttr("fill", fill),
		)
}

func crossicon() *Node {
	return Get(`<svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
	<path d="M13.06 12L17.48 7.57999C17.5537 7.51133 17.6128 7.42853 17.6538 7.33653C17.6948 7.24453 17.7168 7.14521 17.7186 7.04451C17.7204 6.94381 17.7018 6.84378 17.6641 6.75039C17.6264 6.657 17.5703 6.57217 17.499 6.50095C17.4278 6.42973 17.343 6.37359 17.2496 6.33587C17.1562 6.29815 17.0562 6.27962 16.9555 6.2814C16.8548 6.28317 16.7555 6.30522 16.6635 6.34621C16.5715 6.3872 16.4887 6.4463 16.42 6.51999L12 10.94L7.58 6.51999C7.43782 6.38751 7.24978 6.31539 7.05548 6.31881C6.86118 6.32224 6.67579 6.40095 6.53838 6.53837C6.40096 6.67578 6.32225 6.86117 6.31882 7.05547C6.3154 7.24977 6.38752 7.43781 6.52 7.57999L10.94 12L6.52 16.42C6.37955 16.5606 6.30066 16.7512 6.30066 16.95C6.30066 17.1487 6.37955 17.3394 6.52 17.48C6.66062 17.6204 6.85125 17.6993 7.05 17.6993C7.24875 17.6993 7.43937 17.6204 7.58 17.48L12 13.06L16.42 17.48C16.5606 17.6204 16.7512 17.6993 16.95 17.6993C17.1488 17.6993 17.3394 17.6204 17.48 17.48C17.6204 17.3394 17.6993 17.1487 17.6993 16.95C17.6993 16.7512 17.6204 16.5606 17.48 16.42L13.06 12Z" fill="currentColor"></path>
	</svg>`)
}

func pencilicon() *Node {
	return Get(`<svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
	<path d="M4.20999 20.52C4.11375 20.521 4.01826 20.503 3.92902 20.4669C3.83977 20.4309 3.75854 20.3776 3.68999 20.31C3.61139 20.2324 3.55092 20.1383 3.51288 20.0346C3.47485 19.9309 3.4602 19.82 3.46999 19.71L3.77999 15.87C3.79328 15.6917 3.87156 15.5244 3.99999 15.4L15.06 4.34001C15.6762 3.76292 16.4961 3.45367 17.34 3.48001C18.1784 3.48651 18.9828 3.81187 19.59 4.39001C20.1723 4.98801 20.5073 5.78396 20.5277 6.61843C20.5481 7.4529 20.2524 8.26427 19.7 8.89001L8.62999 20C8.50609 20.1235 8.34386 20.201 8.16999 20.22L4.27999 20.57L4.20999 20.52ZM5.20999 16.26L4.99999 19L7.73999 18.75L18.64 7.83001C18.8525 7.57849 18.9884 7.27124 19.0314 6.94479C19.0745 6.61833 19.0229 6.28637 18.8828 5.98836C18.7428 5.69034 18.5201 5.43879 18.2413 5.2636C17.9625 5.0884 17.6393 4.99691 17.31 5.00001C17.0936 4.98627 16.8766 5.01639 16.6721 5.08856C16.4676 5.16073 16.2798 5.27347 16.12 5.42001L5.20999 16.26Z" fill="currentColor"></path>
	</svg>`)
}

// darkLightIcon automatically switch between image icons
// lightsrc and darksrc should ideally be base64 encoded to avoid network requests
func LightDarkIcon(ctx Context, lightsrc, darksrc string, alt string) *Node {
	return GetNode("picture").AddChildren(
		GetNode("source").
			AddAttr("srcSet", darksrc).
			AddAttr("media", "(prefers-color-scheme: dark)"),
		GetNode("img").
			AddClasses("select-none").
			AddAttr("src", lightsrc).
			AddAttr("alt", alt),
	)
}

// Generate an SVG src that can be used in "img"
// TODO(eric): assess whether it's better to use "img"
// or to inject the SVG icon in DOM
// The latter might need to tweak the engine to accept defining a node by it's HTML/SVG content directly
func InlineSvgSrc(svgContent string) string {
	return "data:image/svg+xml;base64," + base64.StdEncoding.EncodeToString([]byte(svgContent))
}

func explodeicon() *Node {
	return Get(`<svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9 11.25H6C5.40326 11.25 4.83097 11.0129 4.40901 10.591C3.98705 10.169 3.75 9.59674 3.75 9V6C3.75 5.40326 3.98705 4.83097 4.40901 4.40901C4.83097 3.98705 5.40326 3.75 6 3.75H9C9.59674 3.75 10.169 3.98705 10.591 4.40901C11.0129 4.83097 11.25 5.40326 11.25 6V9C11.25 9.59674 11.0129 10.169 10.591 10.591C10.169 11.0129 9.59674 11.25 9 11.25ZM6 5.25C5.80189 5.25259 5.61263 5.33244 5.47253 5.47253C5.33244 5.61263 5.25259 5.80189 5.25 6V9C5.25259 9.19811 5.33244 9.38737 5.47253 9.52747C5.61263 9.66756 5.80189 9.74741 6 9.75H9C9.19811 9.74741 9.38737 9.66756 9.52747 9.52747C9.66756 9.38737 9.74741 9.19811 9.75 9V6C9.74741 5.80189 9.66756 5.61263 9.52747 5.47253C9.38737 5.33244 9.19811 5.25259 9 5.25H6Z" fill="black"/>
<path d="M9 20.25H6C5.40326 20.25 4.83097 20.0129 4.40901 19.591C3.98705 19.169 3.75 18.5967 3.75 18V15C3.75 14.4033 3.98705 13.831 4.40901 13.409C4.83097 12.9871 5.40326 12.75 6 12.75H9C9.59674 12.75 10.169 12.9871 10.591 13.409C11.0129 13.831 11.25 14.4033 11.25 15V18C11.25 18.5967 11.0129 19.169 10.591 19.591C10.169 20.0129 9.59674 20.25 9 20.25ZM6 14.25C5.80189 14.2526 5.61263 14.3324 5.47253 14.4725C5.33244 14.6126 5.25259 14.8019 5.25 15V18C5.25259 18.1981 5.33244 18.3874 5.47253 18.5275C5.61263 18.6676 5.80189 18.7474 6 18.75H9C9.19811 18.7474 9.38737 18.6676 9.52747 18.5275C9.66756 18.3874 9.74741 18.1981 9.75 18V15C9.74741 14.8019 9.66756 14.6126 9.52747 14.4725C9.38737 14.3324 9.19811 14.2526 9 14.25H6Z" fill="black"/>
<path d="M18 11.25H15C14.4033 11.25 13.831 11.0129 13.409 10.591C12.9871 10.169 12.75 9.59674 12.75 9V6C12.75 5.40326 12.9871 4.83097 13.409 4.40901C13.831 3.98705 14.4033 3.75 15 3.75H18C18.5967 3.75 19.169 3.98705 19.591 4.40901C20.0129 4.83097 20.25 5.40326 20.25 6V9C20.25 9.59674 20.0129 10.169 19.591 10.591C19.169 11.0129 18.5967 11.25 18 11.25ZM15 5.25C14.8019 5.25259 14.6126 5.33244 14.4725 5.47253C14.3324 5.61263 14.2526 5.80189 14.25 6V9C14.2526 9.19811 14.3324 9.38737 14.4725 9.52747C14.6126 9.66756 14.8019 9.74741 15 9.75H18C18.1981 9.74741 18.3874 9.66756 18.5275 9.52747C18.6676 9.38737 18.7474 9.19811 18.75 9V6C18.7474 5.80189 18.6676 5.61263 18.5275 5.47253C18.3874 5.33244 18.1981 5.25259 18 5.25H15Z" fill="black"/>
<path d="M18 20.25H15C14.4033 20.25 13.831 20.0129 13.409 19.591C12.9871 19.169 12.75 18.5967 12.75 18V15C12.75 14.4033 12.9871 13.831 13.409 13.409C13.831 12.9871 14.4033 12.75 15 12.75H18C18.5967 12.75 19.169 12.9871 19.591 13.409C20.0129 13.831 20.25 14.4033 20.25 15V18C20.25 18.5967 20.0129 19.169 19.591 19.591C19.169 20.0129 18.5967 20.25 18 20.25ZM15 14.25C14.8019 14.2526 14.6126 14.3324 14.4725 14.4725C14.3324 14.6126 14.2526 14.8019 14.25 15V18C14.2526 18.1981 14.3324 18.3874 14.4725 18.5275C14.6126 18.6676 14.8019 18.7474 15 18.75H18C18.1981 18.7474 18.3874 18.6676 18.5275 18.5275C18.6676 18.3874 18.7474 18.1981 18.75 18V15C18.7474 14.8019 18.6676 14.6126 18.5275 14.4725C18.3874 14.3324 18.1981 14.2526 18 14.25H15Z" fill="black"/>
</svg>`)
}
